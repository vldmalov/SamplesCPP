Курс программирования C++/STL.

Цели и задачи курса. Общее.
В рамках курса будут представлены все основные средства и конструкции языка, а также способы их использования. 
Слушатели курса научатся писать эффективный и читабельный код.
 показать плохие примеры кода с подробным разбором и способами решения (добиться корректности кода на этапе исполнения, оптимальной производительности). Научить писать эффективный и читабельный код.




Статические массивы std::array
Списки и вектора
Бинарные деревья поиска
Хеш-таблицы


1) Блок C++
- История языка
- Устроенна программа, как осуществляется ее сборка. Что такое процессы, потоки (вкратце)
- Разнице между компилируемыми и интерпритируемыми языкам. Если программы на C++/C настолько эффективны, почему все задачи не решаются с их использованием? Компромиссы скорости разработки/скорости выполнения программы;
- Уверенно использовать в коде основные конструкции языка;
- В памяти расположена программа, как исполняется. Что такое стек данных и куча. Понимать что такое указатели и ссылки, на что они указывают и ссылаются.
- Что происходит при вызове функций и главное о способах передачи в нее параметров и возврата из нее. Какие проблемы могут быть (например вектор по значению или возврат ссылки на временный объект)
- Устроены умные указатели. Какие бывают, что под капотом и какие цели выполняют
- Шаблоны или обобщенное программирование
- ООП
- Исключения (?) - возможно, но не самая интересная тема, скорее опционально и вкратце
2) Блок стандартной библиотеки
3) Блок STL
- Увереное понимание STL (какие контейнеры бывают, как устроены в памяти, как осуществляются основные операции и в каких случаях предпочтительнее использовать. Алгоритмы, итераторы, адаптеры)
4) Инфраструктурный блок (какие интрументы использует программист и почему)
- IDE
- Текстовые редакторы
- Diff
- Системы контроля версий
- Консоль/терминал (cmd/bash)
- Баг трекеры

5) Познавательный блок:
- Компилируемые/интерпритируемые языки. Плюсы минусы подходов
- Внешние ресуры-справочники (cplusplus.com)
- Q&A (StackOverflow)
- Онлайн-компиляторы
- Веб ресурсы по задачам (litcode.com)
- Как составлять резюме
- Основные профили ()

Lesson 1:
Урок обзорный. Здесь всего по немногу рассказать, ввести в курс дела.
Скорее всего без практики, но возможно для затравки дать задачку с 
Litcode, что бы была отправная точка для след практического занятия 
(является ли массив горой или нет)
В конце, возможно, анкетировать, узнать:
- О интересе к языку и планах использования
- О навыках в C++
- О навыках в других языках
- Пару простых вопросов C++/STL
- Ожидания от курса
- Время, которое готов тратить внеурочно на курс

1.1) Язык C++. 

- Богатая стандартная библиотека (+ о STL, + о Boost)
- IDE. Что такое, какие, какие функции выполняют
- Нажатие на кнопку Run. Что происходит?
- сборка программы (препроцессор, компиляция, линковка)
(возможно показать на примере gcc)
- компиляторы (msvc, gcc, clang, intel)
- компиляция и отладка в командной строке
- системы сборок (make, cmake)
- на примере 2х единиц трансляций показать процесс компиляции и линковки
- различать ошибки компиляции и линковки.
- об отладке программы. release/debug сборка

1.2) Средства разработки и инфраструктура:
- IDE
- Текстовые редакторы (+ о значимости шорткатов, знании инструмента, плагинах на примере ST3)
- СКВ (SVN, Git)
- командная строка (cmd, terminal) + GNU
- Сервер непрерывной интеграции (CI)
- баг трекеры
- системы типа Redmine, Asana


Далее:
*) Почему ошибки времени компиляции лучше ошибок времени исполнения
*) Возвращаемое значение функции main. Зачем? Примеры

----
*) Компиляторы
*) Препроцессор, компиляция, линковка на gcc. Показать пример:
- с одной единицей трансляции
- с несколькими
